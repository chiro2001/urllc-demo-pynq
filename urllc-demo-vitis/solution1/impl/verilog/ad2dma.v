// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ad2dma_ad2dma,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.140000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=181,HLS_SYN_LUT=307,HLS_VERSION=2021_1}" *)

module ad2dma (
// synthesis translate_off
    kernel_block,
// synthesis translate_on
// synthesis translate_off
    kernel_block,
// synthesis translate_on
// synthesis translate_off
    kernel_block,
// synthesis translate_on
// synthesis translate_off
    kernel_block,
// synthesis translate_on
// synthesis translate_off
    kernel_block,
// synthesis translate_on
// synthesis translate_off
    kernel_block,
// synthesis translate_on
// synthesis translate_off
    kernel_block,
// synthesis translate_on
        ap_clk,
        ap_rst_n,
        ad_i_address0,
        ad_i_ce0,
        ad_i_q0,
        outs_TDATA,
        outs_TVALID,
        outs_TREADY,
        outs_TKEEP,
        outs_TSTRB,
        outs_TUSER,
        outs_TLAST,
        outs_TID,
        outs_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

// synthesis translate_off
output kernel_block;
// synthesis translate_on
// synthesis translate_off
output kernel_block;
// synthesis translate_on
// synthesis translate_off
output kernel_block;
// synthesis translate_on
// synthesis translate_off
output kernel_block;
// synthesis translate_on
// synthesis translate_off
output kernel_block;
// synthesis translate_on
// synthesis translate_off
output kernel_block;
// synthesis translate_on
// synthesis translate_off
output kernel_block;
// synthesis translate_on
input   ap_clk;
input   ap_rst_n;
output  [11:0] ad_i_address0;
output   ad_i_ce0;
input  [31:0] ad_i_q0;
output  [31:0] outs_TDATA;
output   outs_TVALID;
input   outs_TREADY;
output  [3:0] outs_TKEEP;
output  [3:0] outs_TSTRB;
output  [0:0] outs_TUSER;
output  [0:0] outs_TLAST;
output  [0:0] outs_TID;
output  [0:0] outs_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg ad_i_ce0;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] depth;
reg    outs_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1057_reg_208;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln1057_reg_208_pp0_iter1_reg;
reg   [0:0] t_last_V_reg_126;
reg   [31:0] depth_read_reg_198;
wire   [32:0] sub_i_i_fu_141_p2;
reg   [32:0] sub_i_i_reg_203;
wire   [0:0] icmp_ln1057_fu_155_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_fu_180_p2;
reg   [0:0] tmp_reg_217;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [0:0] ap_phi_mux_t_last_V_phi_fu_130_p4;
wire   [63:0] trunc_ln1049_cast1_fu_166_p1;
reg   [31:0] i_fu_72;
wire   [31:0] add_ln34_fu_160_p2;
reg    ap_block_pp0_stage0_01001;
wire   [32:0] depth_cast_fu_137_p1;
wire   [32:0] zext_ln1049_fu_171_p1;
wire   [0:0] icmp_ln1049_fu_175_p2;
wire    ap_CS_fsm_state5;
wire    regslice_both_outs_V_data_V_U_apdone_blk;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    outs_TVALID_int_regslice;
wire    outs_TREADY_int_regslice;
wire    regslice_both_outs_V_data_V_U_vld_out;
wire    regslice_both_outs_V_keep_V_U_apdone_blk;
wire    regslice_both_outs_V_keep_V_U_ack_in_dummy;
wire    regslice_both_outs_V_keep_V_U_vld_out;
wire    regslice_both_outs_V_strb_V_U_apdone_blk;
wire    regslice_both_outs_V_strb_V_U_ack_in_dummy;
wire    regslice_both_outs_V_strb_V_U_vld_out;
wire    regslice_both_outs_V_user_V_U_apdone_blk;
wire    regslice_both_outs_V_user_V_U_ack_in_dummy;
wire    regslice_both_outs_V_user_V_U_vld_out;
wire    regslice_both_outs_V_last_V_U_apdone_blk;
wire    regslice_both_outs_V_last_V_U_ack_in_dummy;
wire    regslice_both_outs_V_last_V_U_vld_out;
wire    regslice_both_outs_V_id_V_U_apdone_blk;
wire    regslice_both_outs_V_id_V_U_ack_in_dummy;
wire    regslice_both_outs_V_id_V_U_vld_out;
wire    regslice_both_outs_V_dest_V_U_apdone_blk;
wire    regslice_both_outs_V_dest_V_U_ack_in_dummy;
wire    regslice_both_outs_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ad2dma_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .depth(depth),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

ad2dma_regslice_both #(
    .DataWidth( 32 ))
regslice_both_outs_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ad_i_q0),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(outs_TREADY_int_regslice),
    .data_out(outs_TDATA),
    .vld_out(regslice_both_outs_V_data_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_data_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 4 ))
regslice_both_outs_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(4'd1),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(regslice_both_outs_V_keep_V_U_ack_in_dummy),
    .data_out(outs_TKEEP),
    .vld_out(regslice_both_outs_V_keep_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_keep_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 4 ))
regslice_both_outs_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(4'd1),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(regslice_both_outs_V_strb_V_U_ack_in_dummy),
    .data_out(outs_TSTRB),
    .vld_out(regslice_both_outs_V_strb_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_strb_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_outs_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(regslice_both_outs_V_user_V_U_ack_in_dummy),
    .data_out(outs_TUSER),
    .vld_out(regslice_both_outs_V_user_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_user_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_outs_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_reg_217),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(regslice_both_outs_V_last_V_U_ack_in_dummy),
    .data_out(outs_TLAST),
    .vld_out(regslice_both_outs_V_last_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_last_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_outs_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd1),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(regslice_both_outs_V_id_V_U_ack_in_dummy),
    .data_out(outs_TID),
    .vld_out(regslice_both_outs_V_id_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_id_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_outs_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd1),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(regslice_both_outs_V_dest_V_U_ack_in_dummy),
    .data_out(outs_TDEST),
    .vld_out(regslice_both_outs_V_dest_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_72 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_155_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_72 <= add_ln34_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_reg_208 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_last_V_reg_126 <= tmp_reg_217;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_last_V_reg_126 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        depth_read_reg_198 <= depth;
        sub_i_i_reg_203 <= sub_i_i_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1057_reg_208 <= icmp_ln1057_fu_155_p2;
        icmp_ln1057_reg_208_pp0_iter1_reg <= icmp_ln1057_reg_208;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_155_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_217 <= tmp_fu_180_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ad_i_ce0 = 1'b1;
    end else begin
        ad_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_outs_V_data_V_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1057_fu_155_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_outs_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_reg_208 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_last_V_phi_fu_130_p4 = tmp_reg_217;
    end else begin
        ap_phi_mux_t_last_V_phi_fu_130_p4 = t_last_V_reg_126;
    end
end

always @ (*) begin
    if (((regslice_both_outs_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1057_reg_208_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln1057_reg_208 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        outs_TDATA_blk_n = outs_TREADY_int_regslice;
    end else begin
        outs_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1057_reg_208 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outs_TVALID_int_regslice = 1'b1;
    end else begin
        outs_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((regslice_both_outs_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ad_i_address0 = trunc_ln1049_cast1_fu_166_p1;

assign add_ln34_fu_160_p2 = (i_fu_72 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1057_reg_208_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (outs_TREADY_int_regslice == 1'b0)) | ((icmp_ln1057_reg_208 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outs_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln1057_reg_208_pp0_iter1_reg == 1'd0) & (outs_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln1057_reg_208 == 1'd0) & (outs_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln1057_reg_208_pp0_iter1_reg == 1'd0) & (outs_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln1057_reg_208 == 1'd0) & (outs_TREADY_int_regslice == 1'b0)))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln1057_reg_208 == 1'd0) & (outs_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln1057_reg_208 == 1'd0) & (outs_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln1057_reg_208_pp0_iter1_reg == 1'd0) & (outs_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln1057_reg_208_pp0_iter1_reg == 1'd0) & (outs_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign depth_cast_fu_137_p1 = depth;

assign icmp_ln1049_fu_175_p2 = ((zext_ln1049_fu_171_p1 == sub_i_i_reg_203) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_155_p2 = ((i_fu_72 == depth_read_reg_198) ? 1'b1 : 1'b0);

assign outs_TVALID = regslice_both_outs_V_data_V_U_vld_out;

assign sub_i_i_fu_141_p2 = ($signed(depth_cast_fu_137_p1) + $signed(33'd8589934591));

assign tmp_fu_180_p2 = (icmp_ln1049_fu_175_p2 | ap_phi_mux_t_last_V_phi_fu_130_p4);

assign trunc_ln1049_cast1_fu_166_p1 = i_fu_72;

assign zext_ln1049_fu_171_p1 = i_fu_72;


// synthesis translate_off
`include "ad2dma_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on


// synthesis translate_off
`include "ad2dma_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on


// synthesis translate_off
`include "ad2dma_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on


// synthesis translate_off
`include "ad2dma_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on


// synthesis translate_off
`include "ad2dma_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on


// synthesis translate_off
`include "ad2dma_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on


// synthesis translate_off
`include "ad2dma_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //ad2dma







