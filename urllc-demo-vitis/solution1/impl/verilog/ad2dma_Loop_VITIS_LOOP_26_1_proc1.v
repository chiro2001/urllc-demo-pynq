// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ad2dma_Loop_VITIS_LOOP_26_1_proc1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        inputs_TVALID,
        outs_TREADY,
        inputs_TDATA,
        inputs_TREADY,
        inputs_TKEEP,
        inputs_TSTRB,
        inputs_TUSER,
        inputs_TLAST,
        inputs_TID,
        inputs_TDEST,
        ad_i_address0,
        ad_i_ce0,
        ad_i_q0,
        outs_TDATA,
        outs_TVALID,
        outs_TKEEP,
        outs_TSTRB,
        outs_TUSER,
        outs_TLAST,
        outs_TID,
        outs_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   inputs_TVALID;
input   outs_TREADY;
input  [31:0] inputs_TDATA;
output   inputs_TREADY;
input  [3:0] inputs_TKEEP;
input  [3:0] inputs_TSTRB;
input  [0:0] inputs_TUSER;
input  [0:0] inputs_TLAST;
input  [0:0] inputs_TID;
input  [0:0] inputs_TDEST;
output  [7:0] ad_i_address0;
output   ad_i_ce0;
input  [31:0] ad_i_q0;
output  [31:0] outs_TDATA;
output   outs_TVALID;
output  [3:0] outs_TKEEP;
output  [3:0] outs_TSTRB;
output  [0:0] outs_TUSER;
output  [0:0] outs_TLAST;
output  [0:0] outs_TID;
output  [0:0] outs_TDEST;

reg ap_idle;
reg ad_i_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln26_fu_137_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    regslice_both_outs_V_data_V_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_loop_exit_ready;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
reg    ap_ready_int;
reg    inputs_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    outs_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] tmp_reg_194;
reg   [3:0] tmp_1_reg_199;
reg   [0:0] tmp_2_reg_204;
reg   [0:0] tmp_3_reg_209;
reg   [0:0] tmp_4_reg_214;
reg   [0:0] tmp_5_reg_219;
wire   [63:0] zext_ln26_fu_149_p1;
reg   [7:0] i_fu_68;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_1;
wire   [7:0] add_ln26_fu_143_p2;
reg    ap_block_pp0_stage0_01001;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    regslice_both_inputs_V_data_V_U_apdone_blk;
wire   [31:0] inputs_TDATA_int_regslice;
wire    inputs_TVALID_int_regslice;
reg    inputs_TREADY_int_regslice;
wire    regslice_both_inputs_V_data_V_U_ack_in;
wire    regslice_both_inputs_V_keep_V_U_apdone_blk;
wire   [3:0] inputs_TKEEP_int_regslice;
wire    regslice_both_inputs_V_keep_V_U_vld_out;
wire    regslice_both_inputs_V_keep_V_U_ack_in;
wire    regslice_both_inputs_V_strb_V_U_apdone_blk;
wire   [3:0] inputs_TSTRB_int_regslice;
wire    regslice_both_inputs_V_strb_V_U_vld_out;
wire    regslice_both_inputs_V_strb_V_U_ack_in;
wire    regslice_both_inputs_V_user_V_U_apdone_blk;
wire   [0:0] inputs_TUSER_int_regslice;
wire    regslice_both_inputs_V_user_V_U_vld_out;
wire    regslice_both_inputs_V_user_V_U_ack_in;
wire    regslice_both_inputs_V_last_V_U_apdone_blk;
wire   [0:0] inputs_TLAST_int_regslice;
wire    regslice_both_inputs_V_last_V_U_vld_out;
wire    regslice_both_inputs_V_last_V_U_ack_in;
wire    regslice_both_inputs_V_id_V_U_apdone_blk;
wire   [0:0] inputs_TID_int_regslice;
wire    regslice_both_inputs_V_id_V_U_vld_out;
wire    regslice_both_inputs_V_id_V_U_ack_in;
wire    regslice_both_inputs_V_dest_V_U_apdone_blk;
wire   [0:0] inputs_TDEST_int_regslice;
wire    regslice_both_inputs_V_dest_V_U_vld_out;
wire    regslice_both_inputs_V_dest_V_U_ack_in;
reg    outs_TVALID_int_regslice;
wire    outs_TREADY_int_regslice;
wire    regslice_both_outs_V_data_V_U_vld_out;
wire    regslice_both_outs_V_keep_V_U_apdone_blk;
wire    regslice_both_outs_V_keep_V_U_ack_in_dummy;
wire    regslice_both_outs_V_keep_V_U_vld_out;
wire    regslice_both_outs_V_strb_V_U_apdone_blk;
wire    regslice_both_outs_V_strb_V_U_ack_in_dummy;
wire    regslice_both_outs_V_strb_V_U_vld_out;
wire    regslice_both_outs_V_user_V_U_apdone_blk;
wire    regslice_both_outs_V_user_V_U_ack_in_dummy;
wire    regslice_both_outs_V_user_V_U_vld_out;
wire    regslice_both_outs_V_last_V_U_apdone_blk;
wire    regslice_both_outs_V_last_V_U_ack_in_dummy;
wire    regslice_both_outs_V_last_V_U_vld_out;
wire    regslice_both_outs_V_id_V_U_apdone_blk;
wire    regslice_both_outs_V_id_V_U_ack_in_dummy;
wire    regslice_both_outs_V_id_V_U_vld_out;
wire    regslice_both_outs_V_dest_V_U_apdone_blk;
wire    regslice_both_outs_V_dest_V_U_ack_in_dummy;
wire    regslice_both_outs_V_dest_V_U_vld_out;
reg    ap_condition_152;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ad2dma_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

ad2dma_regslice_both #(
    .DataWidth( 32 ))
regslice_both_inputs_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inputs_TDATA),
    .vld_in(inputs_TVALID),
    .ack_in(regslice_both_inputs_V_data_V_U_ack_in),
    .data_out(inputs_TDATA_int_regslice),
    .vld_out(inputs_TVALID_int_regslice),
    .ack_out(inputs_TREADY_int_regslice),
    .apdone_blk(regslice_both_inputs_V_data_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 4 ))
regslice_both_inputs_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inputs_TKEEP),
    .vld_in(inputs_TVALID),
    .ack_in(regslice_both_inputs_V_keep_V_U_ack_in),
    .data_out(inputs_TKEEP_int_regslice),
    .vld_out(regslice_both_inputs_V_keep_V_U_vld_out),
    .ack_out(inputs_TREADY_int_regslice),
    .apdone_blk(regslice_both_inputs_V_keep_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 4 ))
regslice_both_inputs_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inputs_TSTRB),
    .vld_in(inputs_TVALID),
    .ack_in(regslice_both_inputs_V_strb_V_U_ack_in),
    .data_out(inputs_TSTRB_int_regslice),
    .vld_out(regslice_both_inputs_V_strb_V_U_vld_out),
    .ack_out(inputs_TREADY_int_regslice),
    .apdone_blk(regslice_both_inputs_V_strb_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_inputs_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inputs_TUSER),
    .vld_in(inputs_TVALID),
    .ack_in(regslice_both_inputs_V_user_V_U_ack_in),
    .data_out(inputs_TUSER_int_regslice),
    .vld_out(regslice_both_inputs_V_user_V_U_vld_out),
    .ack_out(inputs_TREADY_int_regslice),
    .apdone_blk(regslice_both_inputs_V_user_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_inputs_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inputs_TLAST),
    .vld_in(inputs_TVALID),
    .ack_in(regslice_both_inputs_V_last_V_U_ack_in),
    .data_out(inputs_TLAST_int_regslice),
    .vld_out(regslice_both_inputs_V_last_V_U_vld_out),
    .ack_out(inputs_TREADY_int_regslice),
    .apdone_blk(regslice_both_inputs_V_last_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_inputs_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inputs_TID),
    .vld_in(inputs_TVALID),
    .ack_in(regslice_both_inputs_V_id_V_U_ack_in),
    .data_out(inputs_TID_int_regslice),
    .vld_out(regslice_both_inputs_V_id_V_U_vld_out),
    .ack_out(inputs_TREADY_int_regslice),
    .apdone_blk(regslice_both_inputs_V_id_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_inputs_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inputs_TDEST),
    .vld_in(inputs_TVALID),
    .ack_in(regslice_both_inputs_V_dest_V_U_ack_in),
    .data_out(inputs_TDEST_int_regslice),
    .vld_out(regslice_both_inputs_V_dest_V_U_vld_out),
    .ack_out(inputs_TREADY_int_regslice),
    .apdone_blk(regslice_both_inputs_V_dest_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 32 ))
regslice_both_outs_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(ad_i_q0),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(outs_TREADY_int_regslice),
    .data_out(outs_TDATA),
    .vld_out(regslice_both_outs_V_data_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_data_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 4 ))
regslice_both_outs_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_reg_194),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(regslice_both_outs_V_keep_V_U_ack_in_dummy),
    .data_out(outs_TKEEP),
    .vld_out(regslice_both_outs_V_keep_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_keep_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 4 ))
regslice_both_outs_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_1_reg_199),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(regslice_both_outs_V_strb_V_U_ack_in_dummy),
    .data_out(outs_TSTRB),
    .vld_out(regslice_both_outs_V_strb_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_strb_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_outs_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_2_reg_204),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(regslice_both_outs_V_user_V_U_ack_in_dummy),
    .data_out(outs_TUSER),
    .vld_out(regslice_both_outs_V_user_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_user_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_outs_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_3_reg_209),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(regslice_both_outs_V_last_V_U_ack_in_dummy),
    .data_out(outs_TLAST),
    .vld_out(regslice_both_outs_V_last_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_last_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_outs_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_4_reg_214),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(regslice_both_outs_V_id_V_U_ack_in_dummy),
    .data_out(outs_TID),
    .vld_out(regslice_both_outs_V_id_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_id_V_U_apdone_blk)
);

ad2dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_outs_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_5_reg_219),
    .vld_in(outs_TVALID_int_regslice),
    .ack_in(regslice_both_outs_V_dest_V_U_ack_in_dummy),
    .data_out(outs_TDEST),
    .vld_out(regslice_both_outs_V_dest_V_U_vld_out),
    .ack_out(outs_TREADY),
    .apdone_blk(regslice_both_outs_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_152)) begin
        if ((icmp_ln26_fu_137_p2 == 1'd0)) begin
            i_fu_68 <= add_ln26_fu_143_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_199 <= inputs_TSTRB_int_regslice;
        tmp_2_reg_204 <= inputs_TUSER_int_regslice;
        tmp_3_reg_209 <= inputs_TLAST_int_regslice;
        tmp_4_reg_214 <= inputs_TID_int_regslice;
        tmp_5_reg_219 <= inputs_TDEST_int_regslice;
        tmp_reg_194 <= inputs_TKEEP_int_regslice;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ad_i_ce0 = 1'b1;
    end else begin
        ad_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln26_fu_137_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln26_fu_137_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputs_TDATA_blk_n = inputs_TVALID_int_regslice;
    end else begin
        inputs_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_fu_137_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inputs_TREADY_int_regslice = 1'b1;
    end else begin
        inputs_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        outs_TDATA_blk_n = outs_TREADY_int_regslice;
    end else begin
        outs_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outs_TVALID_int_regslice = 1'b1;
    end else begin
        outs_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ad_i_address0 = zext_ln26_fu_149_p1;

assign add_ln26_fu_143_p2 = (ap_sig_allocacmp_i_1 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_outs_V_data_V_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_outs_V_data_V_U_apdone_blk == 1'b1) | (outs_TREADY_int_regslice == 1'b0))) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((icmp_ln26_fu_137_p2 == 1'd0) & (inputs_TVALID_int_regslice == 1'b0)))) | ((outs_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_outs_V_data_V_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_outs_V_data_V_U_apdone_blk == 1'b1) | (outs_TREADY_int_regslice == 1'b0))) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((icmp_ln26_fu_137_p2 == 1'd0) & (inputs_TVALID_int_regslice == 1'b0)))) | ((outs_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_outs_V_data_V_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_outs_V_data_V_U_apdone_blk == 1'b1) | (outs_TREADY_int_regslice == 1'b0))) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((icmp_ln26_fu_137_p2 == 1'd0) & (inputs_TVALID_int_regslice == 1'b0)))) | ((outs_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln26_fu_137_p2 == 1'd0) & (inputs_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((regslice_both_outs_V_data_V_U_apdone_blk == 1'b1) | (outs_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (outs_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_condition_152 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln26_fu_137_p2 = ((ap_sig_allocacmp_i_1 == 8'd200) ? 1'b1 : 1'b0);

assign inputs_TREADY = regslice_both_inputs_V_data_V_U_ack_in;

assign outs_TVALID = regslice_both_outs_V_data_V_U_vld_out;

assign zext_ln26_fu_149_p1 = ap_sig_allocacmp_i_1;

endmodule //ad2dma_Loop_VITIS_LOOP_26_1_proc1
